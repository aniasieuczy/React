{"ast":null,"code":"import _slicedToArray from \"C:\\\\Users\\\\marci\\\\Documents\\\\coding\\\\React\\\\22_Lights_Out_Excercise\\\\react-lights-out-starter\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nimport _classCallCheck from \"C:\\\\Users\\\\marci\\\\Documents\\\\coding\\\\React\\\\22_Lights_Out_Excercise\\\\react-lights-out-starter\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\marci\\\\Documents\\\\coding\\\\React\\\\22_Lights_Out_Excercise\\\\react-lights-out-starter\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\marci\\\\Documents\\\\coding\\\\React\\\\22_Lights_Out_Excercise\\\\react-lights-out-starter\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\marci\\\\Documents\\\\coding\\\\React\\\\22_Lights_Out_Excercise\\\\react-lights-out-starter\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\Users\\\\marci\\\\Documents\\\\coding\\\\React\\\\22_Lights_Out_Excercise\\\\react-lights-out-starter\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"C:\\\\Users\\\\marci\\\\documents\\\\coding\\\\react\\\\22_Lights_Out_Excercise\\\\react-lights-out-starter\\\\src\\\\Board.js\";\nimport React, { Component } from \"react\";\nimport Cell from \"./Cell\";\nimport './Board.css';\n/** Game board of Lights out.\n *\n * Properties:\n *\n * - nrows: number of rows of board\n * - ncols: number of cols of board\n * - chanceLightStartsOn: float, chance any cell is lit at start of game\n *\n * State:\n *\n * - hasWon: boolean, true when board is all off\n * - board: array-of-arrays of true/false\n *\n *    For this board:\n *       .  .  .\n *       O  O  .     (where . is off, and O is on)\n *       .  .  .\n *\n *    This would be: [[f, f, f], [t, t, f], [f, f, f]]\n *\n *  This should render an HTML table of individual <Cell /> components.\n *\n *  This doesn't handle any clicks --- clicks are on individual cells\n *\n **/\n\nvar Board = /*#__PURE__*/function (_Component) {\n  _inherits(Board, _Component);\n\n  function Board(props) {\n    var _this;\n\n    _classCallCheck(this, Board);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Board).call(this, props)); // TODO: set initial state\n\n    _this.state = {\n      hasWon: false,\n      board: _this.createBoard()\n    };\n    return _this;\n  }\n  /** create a board nrows high/ncols wide, each cell randomly lit or unlit */\n\n\n  _createClass(Board, [{\n    key: \"chanceLightStartsOn\",\n    value: function chanceLightStartsOn() {\n      var random = Math.floor(Math.random() * 10);\n\n      if (random > 0) {\n        return true;\n      }\n\n      return false;\n    }\n  }, {\n    key: \"createBoard\",\n    value: function createBoard() {\n      var board = []; // TODO: create array-of-arrays of true/false values\n\n      for (var y = 0; y <= this.props.nrows; y++) {\n        for (var x = 0; x <= this.ncols; x++) {}\n      }\n\n      return board;\n    }\n    /** handle changing a cell: update board & determine if winner */\n\n  }, {\n    key: \"flipCellsAround\",\n    value: function flipCellsAround(coord) {\n      var _this$props = this.props,\n          ncols = _this$props.ncols,\n          nrows = _this$props.nrows;\n      var board = this.state.board;\n\n      var _coord$split$map = coord.split(\"-\").map(Number),\n          _coord$split$map2 = _slicedToArray(_coord$split$map, 2),\n          y = _coord$split$map2[0],\n          x = _coord$split$map2[1];\n\n      function flipCell(y, x) {\n        // if this coord is actually on board, flip it\n        if (x >= 0 && x < ncols && y >= 0 && y < nrows) {\n          board[y][x] = !board[y][x];\n        }\n      } // TODO: flip this cell and the cells around it\n      //flip self\n      //flip north neighbor\n      //flip south\n      // win when every cell is turned off\n      // TODO: determine is the game has been won\n      // this.setState({board, hasWon});\n\n    }\n    /** Render game board or winning message. */\n\n  }, {\n    key: \"render\",\n    value: function render() {\n      // if the game is won, just show a winning msg & render nothing else\n      // TODO\n      // make table board\n      return /*#__PURE__*/React.createElement(\"table\", {\n        className: \"Board\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 7\n        }\n      }, /*#__PURE__*/React.createElement(\"tbody\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(\"tr\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(Cell, {\n        isLit: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 13\n        }\n      }), /*#__PURE__*/React.createElement(Cell, {\n        isLit: false,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 13\n        }\n      }), /*#__PURE__*/React.createElement(Cell, {\n        isLit: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 13\n        }\n      })))); // TODO\n    }\n  }]);\n\n  return Board;\n}(Component);\n\nBoard.defaultProps = {\n  nrows: 5,\n  ncols: 5,\n  chanceLightStartsOn: 0.25\n};\nexport default Board;","map":{"version":3,"names":["React","Component","Cell","Board","props","state","hasWon","board","createBoard","random","Math","floor","y","nrows","x","ncols","coord","split","map","Number","flipCell","defaultProps","chanceLightStartsOn"],"sources":["C:/Users/marci/documents/coding/react/22_Lights_Out_Excercise/react-lights-out-starter/src/Board.js"],"sourcesContent":["import React, {Component} from \"react\";\nimport Cell from \"./Cell\";\nimport './Board.css';\n\n\n/** Game board of Lights out.\n *\n * Properties:\n *\n * - nrows: number of rows of board\n * - ncols: number of cols of board\n * - chanceLightStartsOn: float, chance any cell is lit at start of game\n *\n * State:\n *\n * - hasWon: boolean, true when board is all off\n * - board: array-of-arrays of true/false\n *\n *    For this board:\n *       .  .  .\n *       O  O  .     (where . is off, and O is on)\n *       .  .  .\n *\n *    This would be: [[f, f, f], [t, t, f], [f, f, f]]\n *\n *  This should render an HTML table of individual <Cell /> components.\n *\n *  This doesn't handle any clicks --- clicks are on individual cells\n *\n **/\n\nclass Board extends Component {\n\n  static defaultProps = {\n    nrows: 5, ncols: 5, chanceLightStartsOn: 0.25\n  };\n\n  constructor(props) {\n    super(props);\n    // TODO: set initial state\n    this.state = { hasWon: false, board: this.createBoard() }\n  }\n\n  /** create a board nrows high/ncols wide, each cell randomly lit or unlit */\n  chanceLightStartsOn () {\n    const random = Math.floor(Math.random() * 10);\n    if(random > 0) {\n      return true;\n    } \n    return false;\n  }\n\n\n  createBoard() {\n    let board = [];\n    // TODO: create array-of-arrays of true/false values\n    for(let y = 0; y <= this.props.nrows; y++) {\n      for(let x = 0; x <= this.ncols; x++) {\n       \n      }\n    }\n\n    return board\n  }\n\n  /** handle changing a cell: update board & determine if winner */\n\n  flipCellsAround(coord) {\n    let {ncols, nrows} = this.props;\n    let board = this.state.board;\n    let [y, x] = coord.split(\"-\").map(Number);\n\n\n    function flipCell(y, x) {\n      // if this coord is actually on board, flip it\n\n      if (x >= 0 && x < ncols && y >= 0 && y < nrows) {\n        board[y][x] = !board[y][x];\n      }\n    }\n\n    // TODO: flip this cell and the cells around it\n    //flip self\n    //flip north neighbor\n    //flip south\n\n    // win when every cell is turned off\n    // TODO: determine is the game has been won\n\n    // this.setState({board, hasWon});\n  }\n\n\n  /** Render game board or winning message. */\n\n  render() {\n\n    // if the game is won, just show a winning msg & render nothing else\n\n    // TODO\n\n    // make table board\n    return (\n      <table className=\"Board\">\n        <tbody>\n          <tr>\n            <Cell isLit={true} />\n            <Cell isLit={false} />\n            <Cell isLit={true} />\n          </tr>\n        </tbody>\n      </table>\n    )\n\n    // TODO\n  }\n}\n\n\nexport default Board;\n"],"mappings":";;;;;;;AAAA,OAAOA,KAAP,IAAeC,SAAf,QAA+B,OAA/B;AACA,OAAOC,IAAP,MAAiB,QAAjB;AACA,OAAO,aAAP;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;IAEMC,K;;;EAMJ,eAAYC,KAAZ,EAAmB;IAAA;;IAAA;;IACjB,2EAAMA,KAAN,GADiB,CAEjB;;IACA,MAAKC,KAAL,GAAa;MAAEC,MAAM,EAAE,KAAV;MAAiBC,KAAK,EAAE,MAAKC,WAAL;IAAxB,CAAb;IAHiB;EAIlB;EAED;;;;;0CACuB;MACrB,IAAMC,MAAM,GAAGC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACD,MAAL,KAAgB,EAA3B,CAAf;;MACA,IAAGA,MAAM,GAAG,CAAZ,EAAe;QACb,OAAO,IAAP;MACD;;MACD,OAAO,KAAP;IACD;;;kCAGa;MACZ,IAAIF,KAAK,GAAG,EAAZ,CADY,CAEZ;;MACA,KAAI,IAAIK,CAAC,GAAG,CAAZ,EAAeA,CAAC,IAAI,KAAKR,KAAL,CAAWS,KAA/B,EAAsCD,CAAC,EAAvC,EAA2C;QACzC,KAAI,IAAIE,CAAC,GAAG,CAAZ,EAAeA,CAAC,IAAI,KAAKC,KAAzB,EAAgCD,CAAC,EAAjC,EAAqC,CAEpC;MACF;;MAED,OAAOP,KAAP;IACD;IAED;;;;oCAEgBS,K,EAAO;MAAA,kBACA,KAAKZ,KADL;MAAA,IAChBW,KADgB,eAChBA,KADgB;MAAA,IACTF,KADS,eACTA,KADS;MAErB,IAAIN,KAAK,GAAG,KAAKF,KAAL,CAAWE,KAAvB;;MAFqB,uBAGRS,KAAK,CAACC,KAAN,CAAY,GAAZ,EAAiBC,GAAjB,CAAqBC,MAArB,CAHQ;MAAA;MAAA,IAGhBP,CAHgB;MAAA,IAGbE,CAHa;;MAMrB,SAASM,QAAT,CAAkBR,CAAlB,EAAqBE,CAArB,EAAwB;QACtB;QAEA,IAAIA,CAAC,IAAI,CAAL,IAAUA,CAAC,GAAGC,KAAd,IAAuBH,CAAC,IAAI,CAA5B,IAAiCA,CAAC,GAAGC,KAAzC,EAAgD;UAC9CN,KAAK,CAACK,CAAD,CAAL,CAASE,CAAT,IAAc,CAACP,KAAK,CAACK,CAAD,CAAL,CAASE,CAAT,CAAf;QACD;MACF,CAZoB,CAcrB;MACA;MACA;MACA;MAEA;MACA;MAEA;;IACD;IAGD;;;;6BAES;MAEP;MAEA;MAEA;MACA,oBACE;QAAO,SAAS,EAAC,OAAjB;QAAA;QAAA;UAAA;UAAA;UAAA;QAAA;MAAA,gBACE;QAAA;QAAA;UAAA;UAAA;UAAA;QAAA;MAAA,gBACE;QAAA;QAAA;UAAA;UAAA;UAAA;QAAA;MAAA,gBACE,oBAAC,IAAD;QAAM,KAAK,EAAE,IAAb;QAAA;QAAA;UAAA;UAAA;UAAA;QAAA;MAAA,EADF,eAEE,oBAAC,IAAD;QAAM,KAAK,EAAE,KAAb;QAAA;QAAA;UAAA;UAAA;UAAA;QAAA;MAAA,EAFF,eAGE,oBAAC,IAAD;QAAM,KAAK,EAAE,IAAb;QAAA;QAAA;UAAA;UAAA;UAAA;QAAA;MAAA,EAHF,CADF,CADF,CADF,CAPO,CAmBP;IACD;;;;EApFiBb,S;;AAAdE,K,CAEGkB,Y,GAAe;EACpBR,KAAK,EAAE,CADa;EACVE,KAAK,EAAE,CADG;EACAO,mBAAmB,EAAE;AADrB,C;AAsFxB,eAAenB,KAAf"},"metadata":{},"sourceType":"module"}